import numpy as np 
import pandas as pd 

import matplotlib.pyplot as plt
from PIL import Image
import re
import matplotlib.patches as patches
from ultralytics import YOLO
import os
import yaml
import json
from tqdm import tqdm
import mlflow
from ultralytics import settings

# Update a setting
settings.update({"mlflow": True})

# model = YOLO('yolov8n.pt')
# model = YOLO("yolov9s.pt")
model = YOLO("yolov10s.pt")
EPOCHS = 20
BATCH_SIZE = 16
OPTIMIZER = "auto"
SEED = 42
NAME = f"Arm_Yolo_{EPOCHS}"
DEVICE = [0]
VERBOSE = False
RESUME = False
PATIENCE = 15
img_height = 512
img_width = 512

def get_classes_count(pred_json: str):
    classes_count = {}
    classes_count[0] = 0
    classes_count[1] = 0
    classes_count[2] = 0
    for j in json.loads(pred_json):
        classes_count[j['class']] += 1
        
    return classes_count


def generate_submission_file(test, model):
    submission_df = pd.DataFrame(columns=["image_id", "Target"])
    for index, row in tqdm(test.iterrows(), total=len(test)):
        pred = model.predict(f"Resized_test_images/{row['image_id']}.tif")

        try:
            pred_json = get_classes_count(pred[0].tojson())
        except Exception as e:
            pred_json = [0, 0, 0]
        df = pd.DataFrame({"image_id" : [f"{row['image_id']}_1",
                                        f"{row['image_id']}_2",
                                        f"{row['image_id']}_3"],
                        "Target" : [pred_json[0], pred_json[1], pred_json[2]]},columns=["image_id", "Target"])
        submission_df = pd.concat([submission_df, df], axis = 0)
    submission_df.to_csv("submission.csv", index=False)
        
def train():
    """Prepare data for training"""
    test = pd.read_csv("Data/Test.csv")
    mlflow.autolog()
    model.train(
    data = "Data/data.yaml",
    task = 'detect',
    imgsz = (img_height, img_width),
    epochs = EPOCHS,
    batch = BATCH_SIZE,
    optimizer = OPTIMIZER,
    # patience = PATIENCE,
    name = NAME,
    seed = SEED,
    val = True,
    resume = RESUME,
    device = DEVICE,
    verbose = VERBOSE
    )
    generate_submission_file(test, model)


if __name__ == "__main__":
    train()     