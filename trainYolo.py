import numpy as np 
import pandas as pd 

import matplotlib.pyplot as plt
from PIL import Image
import re
import matplotlib.patches as patches
from ultralytics import YOLO
import os
import yaml
import json
from tqdm import tqdm
import mlflow
from ultralytics import settings
import torch
import os

# os.environ['PYTORCH_CUDA_ALLOC_CONF'] = 'max_split_size_mb:128'

# Update a setting
settings.update({"mlflow": True})

#model = YOLO('yolov8n.pt')

EPOCHS = 200
BATCH_SIZE = 32
OPTIMIZER = "auto"
SEED = 42
NAME = f"Arm_Yolo_{EPOCHS}"
DEVICE = [0]
VERBOSE = False
RESUME = False
PATIENCE = 20
img_height = 512
img_width = 512

def get_classes_count(pred_json: str):
    classes_count = {}
    classes_count[0] = 0
    classes_count[1] = 0
    classes_count[2] = 0
    for j in json.loads(pred_json):
        classes_count[j['class']] += 1
        
    return classes_count   

custom_conf_thresholds = {
    0: 0.5,  
    1: 0.7,  
    2: 0.5  
}


# Function to filter results based on custom confidence thresholds
def filter_results(results, custom_conf_thresholds):
    filtered_boxes = []
    for box in results[0].boxes:
        class_id = int(box.cls)
        if box.conf >= custom_conf_thresholds.get(class_id):  # Default threshold if class ID not in dict
            filtered_boxes.append(box)
    return filtered_boxes

# Function to generate the submission file
def generate_submission_file(test, model, submission_file):
    submission_df = pd.DataFrame(columns=["image_id", "Target"])
    for index, row in tqdm(test.iterrows(), total=len(test)):
        # pred = model.predict(f"Data/val/images/{row['image_id']}.tif", iou=0.7, conf=0.1)
        pred = model.predict(f"Images/{row['image_id']}.tif", iou=0.2, conf=0.1, save_txt=True, save_conf=True, agnostic_nms=True)
        filtered_boxes = filter_results(pred, custom_conf_thresholds)
        
        # Convert the filtered predictions to JSON format and count classes
        try:
            pred_json = json.dumps([{"class": int(box.cls), "conf": float(box.conf)} for box in filtered_boxes])
            pred_json = get_classes_count(pred_json)
        except Exception as e:
            pred_json = {0: 0, 1: 0, 2: 0}
        
        df = pd.DataFrame({
            "image_id": [f"{row['image_id']}_1", f"{row['image_id']}_2", f"{row['image_id']}_3"],
            "Target": [pred_json[0], pred_json[1], pred_json[2]]
        }, columns=["image_id", "Target"])
        
        submission_df = pd.concat([submission_df, df], axis=0)
    
    submission_df.to_csv(submission_file, index=False)
        
def train():
    """Prepare data for training"""
    #test = pd.read_csv("Data/Unique_Image_IDs_Val.csv")
    test = pd.read_csv("Data/Test.csv")
    #mlflow.autolog()
    torch.cuda.empty_cache()
    model = YOLO('elvjo400.pt')
    
    # model.train(
    #     data = "Data/data.yaml",
    #     task = 'detect',
    #     imgsz = (img_height, img_width),
    #     epochs = EPOCHS,
    #     batch = BATCH_SIZE,
    #     optimizer = OPTIMIZER,
    #     # patience = PATIENCE,
    #     name = NAME,
    #     seed = SEED,
    #     val = True,
    #     resume = RESUME,
    #     device = DEVICE,
    #     verbose = VERBOSE,
    # )
    #file = 'Data/Validation_prediction4.csv'
    sub_file = 'subbmission_files/submission18yolo400.csv'
    generate_submission_file(test, model, sub_file)


if __name__ == "__main__":
    train()     