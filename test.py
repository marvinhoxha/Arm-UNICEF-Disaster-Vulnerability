import numpy as np 
import pandas as pd 
import os
import shutil
import re
from tqdm import tqdm
import yaml

def read_data():
    train = pd.read_csv("Data/Train.csv")
    test = pd.read_csv("Data/Test.csv")
    return train, test

def clean_data(train):  
    train.dropna(inplace=True)

def split_data(train, val_size=493):
    unique_images = train['image_id'].unique()

    train_imgs = unique_images[:(len(unique_images) - val_size)]
    val_imgs = unique_images[-val_size:]

    train_idx = np.isin(train['image_id'].values, train_imgs)
    val_idx = np.isin(train['image_id'].values, val_imgs)

    train_df = train.iloc[train_idx]
    val_df = train.iloc[val_idx]

    return train_df, val_df

#copy the images to their respective data folders
def create_data_folder(destination_folder, df):
    if not os.path.exists(destination_folder):
        os.makedirs(destination_folder)
        
    unique_images = df['image_id'].unique()
    
    for img in unique_images:
        img_path = os.path.join("Images", img + '.tif')
        shutil.copy(img_path, destination_folder)


#The bbox column is a string, so we are going to decode the data points using regex
def decode_points(ddbox: str) -> list:
    points = [np.float32(point) for point in re.findall(r'\d+\.\d+', ddbox)]
    return points


#scale the dataset to the YOLO format
def convert_bbox_to_string(bbox, img_width=500, img_height=500):
    box = decode_points(bbox)
    w = box[2]
    h = box[3]
    xc = box[0] + int(np.round(w/2))
    yc = box[1] + int(np.round(h/2))
    box = [xc/img_width, yc/img_height, w/img_width, h/img_height]
    box = [f"{i:.4g}" for i in box]
    return " ".join(box)


def create_label_folder(label_dir, dataframe):
    if not os.path.exists(label_dir):
        os.makedirs(label_dir)
        
    unique_images = dataframe['image_id'].unique()
    
    for i,img in zip(tqdm(range(len(unique_images))), unique_images):
        df = dataframe[dataframe['image_id'] == img]
        output_lines = []
        for index, row in df.iterrows():
            category_id = int(row['category_id']) - 1

            bbox_string = convert_bbox_to_string(row['bbox'])
            output_lines.append(f'{category_id} {bbox_string}')

        with open(f"{label_dir}/{img}.txt", 'w') as f:
            for line in output_lines:
                f.write(line + '\n')


def create_yaml(train_dest_dir, val_dest_dir, num_classes, names):
    dict_file = {
    'train': train_dest_dir,
    'val' : val_dest_dir,
    'nc': num_classes,
    'names': names
    }

    with open("data.yaml", 'w+') as file:
        yaml.dump(dict_file, file)

### read yaml file created
def read_yaml_file(file_path):
    with open(file_path, 'r') as file:
        try:
            data = yaml.safe_load(file)
            return data
        except yaml.YAMLError as e:
            print("Error reading YAML:", e)
            return None

### print it with newlines
def print_yaml_data(data):
    formatted_yaml = yaml.dump(data, default_style=False)
    print(formatted_yaml)




train, test = read_data()
clean_data(train)
train_df, val_df = split_data(train)

create_data_folder("Data/train/images", train_df)
create_data_folder("Data/val/images", val_df)

create_label_folder("Data/train/labels", train_df)
create_label_folder("Data/val/labels", val_df)

num_classes = 3
names = ["Thatch", "Tin", "Other"]
train_dest_dir = "Data/train"
val_dest_dir = "Data/val"
create_yaml(train_dest_dir, val_dest_dir, num_classes, names)

yaml_data = read_yaml_file("data.yaml")

if yaml_data:
    print_yaml_data(yaml_data)
