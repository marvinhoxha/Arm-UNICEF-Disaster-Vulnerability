import os
import cv2
import pandas as pd
import ast

def resize_with_padding(image, target_size):
    old_size = image.shape[:2]  # old_size is in (height, width) format
    ratio = float(target_size) / max(old_size)
    new_size = tuple([int(x * ratio) for x in old_size])

    # new_size should be in (width, height) format
    resized_image = cv2.resize(image, (new_size[1], new_size[0]))

    delta_w = target_size - new_size[1]
    delta_h = target_size - new_size[0]
    top, bottom = delta_h // 2, delta_h - (delta_h // 2)
    left, right = delta_w // 2, delta_w - (delta_w // 2)

    color = [0, 0, 0]
    new_image = cv2.copyMakeBorder(resized_image, top, bottom, left, right, cv2.BORDER_CONSTANT, value=color)
    
    return new_image, ratio, top, left

def resize_and_adjust_bbox(image_dir, output_dir, annotations_file, output_annotations_file, target_size):
    # Load the annotations
    annotations = pd.read_csv(annotations_file)
    
    # Create the output directory if it doesn't exist
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    # Initialize a list to store the updated annotations
    updated_annotations = []
    
    for index, row in annotations.iterrows():
        image_id = row['image_id']
        bbox_str = row['bbox']
        
        if pd.isna(bbox_str):
            continue
        
        bbox = ast.literal_eval(bbox_str)  # Convert the string representation of the list to an actual list
        
        # Load the image
        img_path = os.path.join(image_dir, f"{image_id}.tif")  # Assuming images are in .tif format
        if not os.path.exists(img_path):
            continue
        img = cv2.imread(img_path)
        
        # Resize the image with padding
        resized_img, ratio, top, left = resize_with_padding(img, target_size)
        
        # Save the resized image
        resized_img_path = os.path.join(output_dir, f"{image_id}.tif")
        cv2.imwrite(resized_img_path, resized_img)
        
        # Adjust the bounding box coordinates
        new_bbox = [
            bbox[0] * ratio + left,
            bbox[1] * ratio + top,
            bbox[2] * ratio,
            bbox[3] * ratio
        ]
        
        # Update the annotations
        updated_annotations.append({
            'image_id': image_id,
            'bbox': new_bbox,
            'category_id': row['category_id'],
            'id': row['id']
        })
    
    # Save the updated annotations to a new CSV file
    updated_annotations_df = pd.DataFrame(updated_annotations)
    updated_annotations_df.to_csv(output_annotations_file, index=False)
    
def resize_test_images(test_image_dir, output_dir, test_csv, target_size=1024):
    # Load the test CSV
    test_data = pd.read_csv(test_csv)
    
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    for index, row in test_data.iterrows():
        image_id = row['image_id']
        img_path = os.path.join(test_image_dir, f"{image_id}.tif")  # Assuming images are in .tif format
        if os.path.exists(img_path):
            img = cv2.imread(img_path)
            resized_img, ratio, top, left = resize_with_padding(img, target_size)
            output_path = os.path.join(output_dir, f"{image_id}.tif")
            cv2.imwrite(output_path, resized_img)

# Define the paths
image_dir = 'Images'  # Path to the directory containing images
output_dir = 'Resized_Images_1024'  # Path to the directory to save resized images
annotations_file = 'Data/Train.csv'  # Path to the annotations file
output_annotations_file = 'Data/Resized_Train_1024.csv'
output_test_dir = 'Resized_test_images_1024'# Path to save updated annotations
test_csv = 'Data/Test.csv'  # Path to the test CSV file
# Resize images and update annotations


# Uncomment to run
resize_and_adjust_bbox(image_dir, output_dir, annotations_file, output_annotations_file, 512)
resize_test_images(image_dir, output_test_dir, test_csv, target_size=512)